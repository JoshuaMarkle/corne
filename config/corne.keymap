/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define BASE 0
#define NAV 1
#define SYM 2
#define BT 3

// TAP_DANCE settings
#define TAP_SPEED 200

// MACROS to make the the code easier to read
// include name or reference in keymap
// Format: 
//      name        reference  key1 key2 
#define TD_TAB      &td0    // TAB ESC
#define TD_CAPLOCK  &td1    // LSHIFT CAPSLOCK 
#define TD_SPC      &td2    // SPACE ENTER 
#define TD_SLSH     &td3    // SLASH QMARK
#define TD_QUOTE    &td4    // QUOTE DOUBLE_QUOTES
#define TD_EQL      &td5    // EQUAL PLUS
#define TD_BSLS     &td6    // BACKSLASH PIPE 
#define TD_MINUS    &td7    // MINUS UNDERSCORE
#define TD_SCLN     &td8    // SEMICOLON COLON 
#define TD_COMM     &td9    // COMMA LESS_THAN 
#define TD_DOT      &td10   // PERIOD GREATER_THAN 
#define TD_BACKF    &td11   // GRAVE TILDE
#define TD_ALT      &td12   // LALT GUI
#define TD_ARR      &td13   // Q AT (@)
#define TD_ATCAT    &td14   // AT CARET 
#define TD_TAW      &td15   // TAB LWIN
#define TD_SCLOCK   &td16   // (S)LSHIFT CAPSLOCK (Sticky shift)

/ {


    behaviors{  
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_0"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp TAB>, <&kp ESC>;

            }; 
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_1"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp LSHIFT>, <&kp CAPSLOCK>;
            }; 
        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_2"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SPACE>, <&kp ENTER>;
            }; 
        td3: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_3"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SLASH>, <&kp QMARK>;
            }; 
        td4: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_4"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SINGLE_QUOTE>, <&kp DOUBLE_QUOTES>;
            }; 
        td5: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_5"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp EQUAL>, <&kp PLUS>;
            }; 
        td6: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_6"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp BACKSLASH>, <&kp PIPE>;
            }; 
        td7: tap_dance_7 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_7"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp MINUS>, <&kp UNDERSCORE>;
            }; 
        td8: tap_dance_8 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_8"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp SEMICOLON>, <&kp COLON>;
            }; 
        td9: tap_dance_9 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_9"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp COMMA>, <&kp LESS_THAN>;
            }; 
        td10: tap_dance_10 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_10"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp PERIOD>, <&kp GREATER_THAN>;
            }; 
        td11: tap_dance_11 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_11"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp GRAVE>, <&kp TILDE>;
            };            

        td12: tap_dance_12 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_12"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp LALT>, <&kp GUI>;
            };
        td13: tap_dance_13 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_13"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp Q>, <&kp AT>;
            };
        td14: tap_dance_14 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_14"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp AT>, <&kp CARET>;
            };
        td15: tap_dance_15 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_15"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&kp TAB>, <&kp LWIN>;
            };
        td16: tap_dance_16 {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_DANCE_16"; 
            #binding-cells = <0>; 
            tapping-term-ms = <TAP_SPEED>; 
            bindings = <&sk LSHIFT>, <&kp CAPSLOCK>;
            }; 
    };

    // LAYERS
    conditional_layers {
        compatible = "zmk,conditional-layers";
        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | TAB:ESC  | ; : | , < | . > |  P  |  Y  |        |  F  |  G  |  C  |  R  |  L  | BKSP |
// | CTRL     |  A  |  O  |  E  |  U  |  I  |        |  D  |  H  |  T  |  N  |  S  | DEL  |
// | LSFT:CAP | ' " | q @ | J   |  K  |  X  |        |  B  |  M  |  W  |  V  |  Z  | TAB  |
//                        | GUI | LWR | SPC |        | ENT | RSE | ALT |
                        bindings = <
TD_TAB    TD_SCLN  TD_COMM TD_DOT &kp P &kp Y        &kp F &kp G &kp C &kp R &kp L &kp BSPC
&kp LCTRL &kp A    &kp O   &kp E  &kp U &kp I        &kp D &kp H &kp T &kp N &kp S &kp DEL
TD_SCLOCK TD_QUOTE &kp Q   &kp J  &kp K &kp X        &kp B &kp M &kp W &kp V &kp Z TD_TAW
                          TD_ALT &mo 1 TD_SPC        RET &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
//  | ESC  |  7  |  5  |  3  |  1  |  9  |        |  0  |  2  |  4  |  6  |  8  |      |
//  | F11  | F1  | F2  | F3  | F4  | F5  |        | LFT | DWN |  UP | RGT |     |      |
//  | SHFT | F6  | F7  | F8  | F9  | F10 |        |HOME | PGDN| PGUP| END |     |      |
//                     |     |     |     |        |     |     |     |
                        bindings = <
&trans  &kp N7 &kp N5 &kp N3 &kp N1 &kp N9        &kp N0   &kp N2    &kp N4    &kp N6    &kp N8 &trans
&kp F11 &kp F1 &kp F2 &kp F3 &kp F4 &kp F5        &kp LEFT &kp DOWN  &kp UP    &kp RIGHT &trans &trans
&trans  &kp F6 &kp F7 &kp F8 &kp F9 &kp F10       &kp HOME &kp PG_DN &kp PG_UP &kp END   &trans &trans
                      &trans &trans &trans        &trans &trans &trans
                        >;
                };

                raise_layer {

// -----------------------------------------------------------------------------------------
// |  ESC |  '  |  <  |  >  |  "  |     |        |     |  &  |  [  |  ]  |  %  | DEL  |
// | CTRL |  !  |  -  |  +  |  =  |  #  |        |  |  |  :  |  (  |  )  |  ?  |      |
// | SHFT |  ^  |  /  |  *  |  \  |  $  |        |  ~  |  _  |  {  |  }  |  @  |      |
//                    | GUI |     | SPC |        | ENT |     | ALT |

//                        bindings = <
//&trans    &kp SQT   &kp LT    &kp GT   &kp DQT   &trans      &trans    &kp AMPS  &kp LBKT &kp RBKT &kp PRCNT &kp DEL
//&kp LCTRL &kp EXCL  &kp MINUS &kp PLUS &kp EQUAL &kp HASH    &kp PIPE2 &kp COLON &kp LPAR &kp RPAR &kp QMARK &trans
//&trans    &kp CARET &kp FSLH  &kp STAR &kp BSLH  &kp DLLR    &kp TILDE &kp UNDER &kp LBRC &kp RBRC &kp AT    &trans
//                    	           &trans &trans &trans      &trans &trans &trans
//                        >;
                        bindings = <
   &kp ESC    &trans       &trans       &trans       &trans       &trans                &trans          &trans         &trans       &trans     &trans &trans
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4          &kp LEFT        &kp C_PREV     &kp C_PP     &kp C_NEXT &trans &trans
   &trans  &trans       &trans       &trans       &trans       &trans                &kp C_MUTE      &kp C_VOL_DN   &kp C_VOL_UP &trans     &trans &trans
                          	            &kp LGUI     &trans       &kp SPACE             &kp RET         &trans          &kp RALT
                        >;
                };


// bt_media_layer: BT functions and media controls
                bt_media_layer {
// -----------------------------------------------------------------------------------------
// |  ESC |     |     |     |     |     |   |         |     |         |     |   |      |
// | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT     | PRV |  Play/P | NXT |   |      |
// | SHFT |     |     |     |     |     |   | MUTE    | VOL-| VOL+|   |     |   |      |
//                    | GUI |     | SPC |   | ENT     |     | ALT |
                        bindings = <
   &kp ESC    &trans       &trans       &trans       &trans       &trans                &trans          &trans         &trans       &trans     &trans &trans
   &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4          &kp LEFT        &kp C_PREV     &kp C_PP     &kp C_NEXT &trans &trans
   &trans  &trans       &trans       &trans       &trans       &trans                &kp C_MUTE      &kp C_VOL_DN   &kp C_VOL_UP &trans     &trans &trans
                          	            &kp LGUI     &trans       &kp SPACE             &kp RET         &trans          &kp RALT
                        >;
                }; 

 
        };
};